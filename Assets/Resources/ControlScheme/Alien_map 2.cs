//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/ControlScheme/Alien_map 2.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Alien_map2: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Alien_map2()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Alien_map 2"",
    ""maps"": [
        {
            ""name"": ""AlienMap"",
            ""id"": ""aa11ec3f-fb65-4bb7-9098-db1a11e6a7ce"",
            ""actions"": [
                {
                    ""name"": ""Directions"",
                    ""type"": ""Value"",
                    ""id"": ""878ad6c6-45f8-4141-8f0e-0077f6bd09ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sauter"",
                    ""type"": ""Button"",
                    ""id"": ""0fecae30-e55d-40c6-8d7d-a47713819b94"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interagir"",
                    ""type"": ""Button"",
                    ""id"": ""53370de6-524f-4b81-b3bc-e03c0a78afb7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""dir_x"",
                    ""type"": ""Value"",
                    ""id"": ""1d887a5c-90ca-44ab-a2aa-087f7879477a"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""c8b7ec25-efb4-41ca-b37f-bea52ac5f2e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d0279b0-b089-43db-8993-c26d4ae45e04"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""16941f2e-a036-4f78-8fb8-3c0134bdc9cd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e32db265-776a-48f9-935a-b5226b129e48"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""84e7918f-c3d8-48de-bbc1-cc4d8ce2ac2b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3204b782-1594-446a-8811-410f3b6536ab"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e28e2f99-a219-427b-af42-bdc62bf387c9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directions"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""22a675f7-a070-4fb4-982e-a1c60eee7cbb"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sauter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c986f5bd-7402-4940-8b5c-7eede6cc9749"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sauter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1bac2295-f2c2-4983-b27f-49e82b3a4383"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interagir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70408672-cacf-4758-baf9-fe25418310a2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interagir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d317bbb-4e28-422b-b815-582050a4c0f5"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""dir_x"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90e1af65-5e33-4dd7-9dbb-5b212e5d19bd"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=0.1)"",
                    ""groups"": """",
                    ""action"": ""dir_x"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ad9469e-8a3f-4531-9901-61151faf0d68"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AlienMap
        m_AlienMap = asset.FindActionMap("AlienMap", throwIfNotFound: true);
        m_AlienMap_Directions = m_AlienMap.FindAction("Directions", throwIfNotFound: true);
        m_AlienMap_Sauter = m_AlienMap.FindAction("Sauter", throwIfNotFound: true);
        m_AlienMap_Interagir = m_AlienMap.FindAction("Interagir", throwIfNotFound: true);
        m_AlienMap_dir_x = m_AlienMap.FindAction("dir_x", throwIfNotFound: true);
        m_AlienMap_Look = m_AlienMap.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AlienMap
    private readonly InputActionMap m_AlienMap;
    private List<IAlienMapActions> m_AlienMapActionsCallbackInterfaces = new List<IAlienMapActions>();
    private readonly InputAction m_AlienMap_Directions;
    private readonly InputAction m_AlienMap_Sauter;
    private readonly InputAction m_AlienMap_Interagir;
    private readonly InputAction m_AlienMap_dir_x;
    private readonly InputAction m_AlienMap_Look;
    public struct AlienMapActions
    {
        private @Alien_map2 m_Wrapper;
        public AlienMapActions(@Alien_map2 wrapper) { m_Wrapper = wrapper; }
        public InputAction @Directions => m_Wrapper.m_AlienMap_Directions;
        public InputAction @Sauter => m_Wrapper.m_AlienMap_Sauter;
        public InputAction @Interagir => m_Wrapper.m_AlienMap_Interagir;
        public InputAction @dir_x => m_Wrapper.m_AlienMap_dir_x;
        public InputAction @Look => m_Wrapper.m_AlienMap_Look;
        public InputActionMap Get() { return m_Wrapper.m_AlienMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AlienMapActions set) { return set.Get(); }
        public void AddCallbacks(IAlienMapActions instance)
        {
            if (instance == null || m_Wrapper.m_AlienMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AlienMapActionsCallbackInterfaces.Add(instance);
            @Directions.started += instance.OnDirections;
            @Directions.performed += instance.OnDirections;
            @Directions.canceled += instance.OnDirections;
            @Sauter.started += instance.OnSauter;
            @Sauter.performed += instance.OnSauter;
            @Sauter.canceled += instance.OnSauter;
            @Interagir.started += instance.OnInteragir;
            @Interagir.performed += instance.OnInteragir;
            @Interagir.canceled += instance.OnInteragir;
            @dir_x.started += instance.OnDir_x;
            @dir_x.performed += instance.OnDir_x;
            @dir_x.canceled += instance.OnDir_x;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IAlienMapActions instance)
        {
            @Directions.started -= instance.OnDirections;
            @Directions.performed -= instance.OnDirections;
            @Directions.canceled -= instance.OnDirections;
            @Sauter.started -= instance.OnSauter;
            @Sauter.performed -= instance.OnSauter;
            @Sauter.canceled -= instance.OnSauter;
            @Interagir.started -= instance.OnInteragir;
            @Interagir.performed -= instance.OnInteragir;
            @Interagir.canceled -= instance.OnInteragir;
            @dir_x.started -= instance.OnDir_x;
            @dir_x.performed -= instance.OnDir_x;
            @dir_x.canceled -= instance.OnDir_x;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IAlienMapActions instance)
        {
            if (m_Wrapper.m_AlienMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAlienMapActions instance)
        {
            foreach (var item in m_Wrapper.m_AlienMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AlienMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AlienMapActions @AlienMap => new AlienMapActions(this);
    public interface IAlienMapActions
    {
        void OnDirections(InputAction.CallbackContext context);
        void OnSauter(InputAction.CallbackContext context);
        void OnInteragir(InputAction.CallbackContext context);
        void OnDir_x(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
